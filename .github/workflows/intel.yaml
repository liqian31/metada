name: Intel

on:
  push:
    branches: [master]
    paths:
      - '.github/workflows/intel.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
  pull_request:
    branches: [master]
    paths:
      - '.github/workflows/intel.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'

jobs:
  build:
    name: Build & Test with Intel oneAPI
    runs-on: ubuntu-latest
    container:
      image: intel/oneapi-hpckit:latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      shell: bash
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
          clang-format \
          cmake \
          ninja-build \
          python3-dev \
          python3-numpy \
          libgtest-dev \
          libgmock-dev \
          libgoogle-glog-dev \
          lcov \
          libyaml-cpp-dev \
          nlohmann-json3-dev \
          libnetcdf-dev \
          libnetcdf-c++4-dev \
          libxtensor-dev

    - name: Set up Intel compiler environment
      shell: bash
      run: |
        source /opt/intel/oneapi/setvars.sh --force || true
        echo "ICX path: $(which icx)"
        echo "IFX path: $(which ifx)"

    - name: Install CMake 3.30+
      shell: bash
      run: |
        apt remove --purge -y cmake || true
        wget https://github.com/Kitware/CMake/releases/download/v3.30.5/cmake-3.30.5-linux-x86_64.sh
        chmod +x cmake-3.30.5-linux-x86_64.sh
        ./cmake-3.30.5-linux-x86_64.sh --skip-license --prefix=/usr/local
        cmake --version

    - name: Configure with CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -G Ninja \
          -DCMAKE_C_COMPILER=icx \
          -DCMAKE_CXX_COMPILER=icpx \
          -DCMAKE_Fortran_COMPILER=ifx \
          -DCMAKE_BUILD_TYPE=Release

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build .

    - name: Test
      shell: bash
      run: |
        cd build
        ctest --output-on-failure
