name: Windows

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/windows.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/windows.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      run: |
        # Clone vcpkg repo
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        # Bootstrap vcpkg
        ./bootstrap-vcpkg.bat
        # Set environment variable for CMake
        echo "VCPKG_ROOT=${{github.workspace}}/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-lcov

    - name: Install lcov to PATH
      shell: msys2 {0}
      run: |
        # Verify lcov is installed
        lcov --version
        genhtml --version
        
        # Create bin directory for lcov wrappers
        mkdir -p "$RUNNER_TEMP/bin"
        echo "$RUNNER_TEMP/bin" >> $GITHUB_PATH
        
        # Create wrapper script for lcov in PowerShell-accessible location
        cat > "$RUNNER_TEMP/bin/lcov.bat" << 'EOFSCRIPT1'
        @echo off
        C:\msys64\usr\bin\bash.exe -l -c "lcov %*"
        EOFSCRIPT1

        # Create wrapper script for genhtml
        cat > "$RUNNER_TEMP/bin/genhtml.bat" << 'EOFSCRIPT2'
        @echo off
        C:\msys64\usr\bin\bash.exe -l -c "genhtml %*"
        EOFSCRIPT2
        
        # Create a CMake executable module to find lcov
        mkdir -p "$RUNNER_TEMP/cmake"
        echo "$RUNNER_TEMP/cmake" >> $GITHUB_PATH
        
        cat > "$RUNNER_TEMP/cmake/FindLcov.cmake" << 'EOFCMAKE'
        # FindLcov.cmake
        # This module finds the lcov and genhtml executables.
        
        # Find the lcov and genhtml executables
        find_program(Lcov_EXECUTABLE NAMES lcov lcov.bat)
        find_program(Lcov_GENHTML NAMES genhtml genhtml.bat)
        
        # Handle standard arguments
        include(FindPackageHandleStandardArgs)
        find_package_handle_standard_args(Lcov
            REQUIRED_VARS Lcov_EXECUTABLE Lcov_GENHTML
        )
        
        # Mark as advanced
        mark_as_advanced(Lcov_EXECUTABLE Lcov_GENHTML)
        EOFCMAKE
        
        # Convert paths to use forward slashes for CMake
        LCOV_PATH=$(cygpath -m "$RUNNER_TEMP/bin/lcov.bat")
        GENHTML_PATH=$(cygpath -m "$RUNNER_TEMP/bin/genhtml.bat")
        CMAKE_MODULE_PATH=$(cygpath -m "$RUNNER_TEMP/cmake")
        
        # Set environment variables for CMake to find lcov
        echo "Lcov_EXECUTABLE=${LCOV_PATH}" >> $GITHUB_ENV
        echo "Lcov_GENHTML=${GENHTML_PATH}" >> $GITHUB_ENV
        echo "CMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}" >> $GITHUB_ENV

    - name: Install dependencies with vcpkg
      run: |
        cd vcpkg
        # Install all dependencies
        ./vcpkg install gtest
        ./vcpkg install glog
        ./vcpkg install yaml-cpp
        ./vcpkg install nlohmann-json
        ./vcpkg install netcdf-c
        ./vcpkg install netcdf-cxx4
        ./vcpkg install xtensor
        ./vcpkg install xtensor-blas
        # List installed packages
        ./vcpkg list

    - name: Install Python dependencies
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install numpy
      run: pip install numpy
      
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup MinGW with Chocolatey
      run: |
        choco install mingw --version=12.2.0 -y
        # Add to path
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # Verify installation
        gcc --version
        g++ --version
        gfortran --version

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        # Use MinGW for all compilers to ensure compatibility
        cmake -G Ninja `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_C_COMPILER=gcc `
          -DCMAKE_CXX_COMPILER=g++ `
          -DCMAKE_Fortran_COMPILER=gfortran `
          -DCMAKE_MODULE_PATH="$env:CMAKE_MODULE_PATH" `
          -DLcov_EXECUTABLE="$env:Lcov_EXECUTABLE" `
          -DLcov_GENHTML="$env:Lcov_GENHTML" `
          ..

    - name: Build
      run: |
        cd build
        cmake --build .

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    # Coverage upload temporarily disabled until coverage generation is properly configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     files: ./build/coverage.info
    #     flags: windows
    #     name: windows-coverage
    #     fail_ci_if_error: true 