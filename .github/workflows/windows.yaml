name: Windows

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/windows.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/windows.yaml'
      - 'cmake/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      run: |
        # Clone vcpkg repo
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        # Bootstrap vcpkg
        ./bootstrap-vcpkg.bat
        # Set environment variable for CMake
        echo "VCPKG_ROOT=${{github.workspace}}/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-lcov
          
    - name: Install lcov to PATH
      shell: bash
      run: |
        # Find where lcov and genhtml are installed
        LCOV_PATH=$(find /mingw64 -name lcov.exe -o -name lcov 2>/dev/null | head -1)
        GENHTML_PATH=$(find /mingw64 -name genhtml.exe -o -name genhtml 2>/dev/null | head -1)
        
        if [ -z "$LCOV_PATH" ]; then
          echo "lcov not found, installing via pacman"
          pacman -S --noconfirm mingw-w64-x86_64-lcov
          LCOV_PATH=$(find /mingw64 -name lcov.exe -o -name lcov 2>/dev/null | head -1)
          GENHTML_PATH=$(find /mingw64 -name genhtml.exe -o -name genhtml 2>/dev/null | head -1)
        fi
        
        echo "Found lcov at: $LCOV_PATH"
        echo "Found genhtml at: $GENHTML_PATH"
        
        # Create bin directory for wrapper scripts
        mkdir -p "$RUNNER_TEMP/bin"
        echo "$RUNNER_TEMP/bin" >> $GITHUB_PATH
        
        # Create wrapper script for lcov
        cat > "$RUNNER_TEMP/bin/lcov" << 'EOFSCRIPT1'
        #!/bin/bash
        # Use the full path to lcov
        /mingw64/bin/perl /mingw64/bin/lcov "$@"
        EOFSCRIPT1

        # Create wrapper script for genhtml
        cat > "$RUNNER_TEMP/bin/genhtml" << 'EOFSCRIPT2'
        #!/bin/bash
        # Use the full path to genhtml
        /mingw64/bin/perl /mingw64/bin/genhtml "$@"
        EOFSCRIPT2

        # Make scripts executable
        chmod +x "$RUNNER_TEMP/bin/lcov"
        chmod +x "$RUNNER_TEMP/bin/genhtml"
        
        # Verify installation using the wrapper scripts
        "$RUNNER_TEMP/bin/lcov" --version || echo "lcov verification failed"
        "$RUNNER_TEMP/bin/genhtml" --version || echo "genhtml verification failed"

    - name: Install dependencies with vcpkg
      run: |
        cd vcpkg
        # Install all dependencies
        ./vcpkg install gtest
        ./vcpkg install glog
        ./vcpkg install yaml-cpp
        ./vcpkg install nlohmann-json
        ./vcpkg install netcdf-c
        ./vcpkg install netcdf-cxx4
        ./vcpkg install xtensor
        ./vcpkg install xtensor-blas
        # List installed packages
        ./vcpkg list

    - name: Install Python dependencies
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install numpy
      run: pip install numpy
      
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup MinGW with Chocolatey
      run: |
        choco install mingw --version=12.2.0 -y
        # Add to path
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # Verify installation
        gcc --version
        g++ --version
        gfortran --version

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        # Use MinGW for all compilers to ensure compatibility
        cmake -G Ninja `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_C_COMPILER=gcc `
          -DCMAKE_CXX_COMPILER=g++ `
          -DCMAKE_Fortran_COMPILER=gfortran `
          ..

    - name: Build
      run: |
        cd build
        cmake --build .

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    # Coverage upload temporarily disabled until coverage generation is properly configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     files: ./build/coverage.info
    #     flags: windows
    #     name: windows-coverage
    #     fail_ci_if_error: true 